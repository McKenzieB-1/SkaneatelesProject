{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8b5aafea",
   "metadata": {},
   "source": [
    "# This notebook imports the Skaneateles data, splits it into training and validation sets, and runs the data on a number of models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8489d2e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da5b3d65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>NDWI</th>\n",
       "      <th>DATE</th>\n",
       "      <th>COORDS</th>\n",
       "      <th>HAB</th>\n",
       "      <th>PRECIP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.265</td>\n",
       "      <td>7/15/18</td>\n",
       "      <td>42.852332, -76.347316</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.265</td>\n",
       "      <td>7/15/18</td>\n",
       "      <td>42.852332, -76.347316</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.409</td>\n",
       "      <td>8/4/18</td>\n",
       "      <td>42.8451, -76.350304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.409</td>\n",
       "      <td>8/4/18</td>\n",
       "      <td>42.8451, -76.350304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.211</td>\n",
       "      <td>8/12/18</td>\n",
       "      <td>42.861515, -76.359411</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>143</td>\n",
       "      <td>143</td>\n",
       "      <td>-0.348</td>\n",
       "      <td>8/26/21</td>\n",
       "      <td>42.867637, -76.367339</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>144</td>\n",
       "      <td>144</td>\n",
       "      <td>-0.012</td>\n",
       "      <td>8/26/21</td>\n",
       "      <td>42.861515, -76.359411</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>145</td>\n",
       "      <td>145</td>\n",
       "      <td>-0.244</td>\n",
       "      <td>8/26/21</td>\n",
       "      <td>42.8337, -76.3258</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>146</td>\n",
       "      <td>146</td>\n",
       "      <td>-0.224</td>\n",
       "      <td>8/26/21</td>\n",
       "      <td>42.8333, -76.3229</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>147</td>\n",
       "      <td>147</td>\n",
       "      <td>-0.279</td>\n",
       "      <td>8/26/21</td>\n",
       "      <td>42.922, -76.4299</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>148 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Unnamed: 0.1   NDWI     DATE                 COORDS  HAB  \\\n",
       "0             0             0 -0.265  7/15/18  42.852332, -76.347316    0   \n",
       "1             1             1 -0.265  7/15/18  42.852332, -76.347316    0   \n",
       "2             2             2 -0.409   8/4/18    42.8451, -76.350304    1   \n",
       "3             3             3 -0.409   8/4/18    42.8451, -76.350304    1   \n",
       "4             4             4  0.211  8/12/18  42.861515, -76.359411    0   \n",
       "..          ...           ...    ...      ...                    ...  ...   \n",
       "143         143           143 -0.348  8/26/21  42.867637, -76.367339    1   \n",
       "144         144           144 -0.012  8/26/21  42.861515, -76.359411    1   \n",
       "145         145           145 -0.244  8/26/21      42.8337, -76.3258    1   \n",
       "146         146           146 -0.224  8/26/21      42.8333, -76.3229    1   \n",
       "147         147           147 -0.279  8/26/21       42.922, -76.4299    1   \n",
       "\n",
       "     PRECIP  \n",
       "0       0.0  \n",
       "1       0.0  \n",
       "2       0.0  \n",
       "3       0.0  \n",
       "4       0.0  \n",
       "..      ...  \n",
       "143     0.0  \n",
       "144     0.0  \n",
       "145     0.0  \n",
       "146     0.0  \n",
       "147     0.0  \n",
       "\n",
       "[148 rows x 7 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in data from csv into pandas dataframe\n",
    "data = pd.read_csv(\"DATAforMODEL.csv\")\n",
    "\n",
    "data # Data has date and coorinates of location, HAB column (1 for yes there was a bloom, 0 for no ther was not\n",
    "     # a bloom), NDWI value, and precip value (daily average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "de9b11e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>NDWI</th>\n",
       "      <th>DATE</th>\n",
       "      <th>COORDS</th>\n",
       "      <th>HAB</th>\n",
       "      <th>PRECIP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>41</td>\n",
       "      <td>-0.151</td>\n",
       "      <td>7/23/19</td>\n",
       "      <td>42.852332, -76.347316</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>-0.172</td>\n",
       "      <td>7/25/19</td>\n",
       "      <td>42.907958, -76.396092</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.265</td>\n",
       "      <td>7/15/18</td>\n",
       "      <td>42.852332, -76.347316</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>63</td>\n",
       "      <td>63</td>\n",
       "      <td>0.049</td>\n",
       "      <td>9/3/19</td>\n",
       "      <td>42.861515, -76.359411</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>0.166</td>\n",
       "      <td>8/12/19</td>\n",
       "      <td>42.861515, -76.359411</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>80</td>\n",
       "      <td>80</td>\n",
       "      <td>-0.514</td>\n",
       "      <td>9/21/19</td>\n",
       "      <td>42.944863, -76.428465</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>134</td>\n",
       "      <td>134</td>\n",
       "      <td>0.020</td>\n",
       "      <td>7/19/21</td>\n",
       "      <td>42.944863, -76.428465</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>95</td>\n",
       "      <td>95</td>\n",
       "      <td>0.219</td>\n",
       "      <td>7/19/20</td>\n",
       "      <td>42.861515, -76.359411</td>\n",
       "      <td>0</td>\n",
       "      <td>1.019758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.409</td>\n",
       "      <td>8/4/18</td>\n",
       "      <td>42.8451, -76.350304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.409</td>\n",
       "      <td>8/4/18</td>\n",
       "      <td>42.8451, -76.350304</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Unnamed: 0.1   NDWI     DATE                 COORDS  HAB  \\\n",
       "41           41            41 -0.151  7/23/19  42.852332, -76.347316    0   \n",
       "42           42            42 -0.172  7/25/19  42.907958, -76.396092    0   \n",
       "0             0             0 -0.265  7/15/18  42.852332, -76.347316    0   \n",
       "63           63            63  0.049   9/3/19  42.861515, -76.359411    0   \n",
       "48           48            48  0.166  8/12/19  42.861515, -76.359411    0   \n",
       "..          ...           ...    ...      ...                    ...  ...   \n",
       "80           80            80 -0.514  9/21/19  42.944863, -76.428465    1   \n",
       "134         134           134  0.020  7/19/21  42.944863, -76.428465    0   \n",
       "95           95            95  0.219  7/19/20  42.861515, -76.359411    0   \n",
       "2             2             2 -0.409   8/4/18    42.8451, -76.350304    1   \n",
       "3             3             3 -0.409   8/4/18    42.8451, -76.350304    1   \n",
       "\n",
       "       PRECIP  \n",
       "41   0.000000  \n",
       "42   0.000000  \n",
       "0    0.000000  \n",
       "63   0.000000  \n",
       "48   0.000000  \n",
       "..        ...  \n",
       "80   0.000000  \n",
       "134  0.000000  \n",
       "95   1.019758  \n",
       "2    0.000000  \n",
       "3    0.000000  \n",
       "\n",
       "[118 rows x 7 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Spliting data into training and validation subsets - 80% for training data\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "train, test = train_test_split(data, test_size=0.2)\n",
    "\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "913ace57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set style for upcoming graph\n",
    "\n",
    "sns.set_style('dark')\n",
    "import matplotlib as mpl\n",
    "mpl.style.use(['https://gist.githubusercontent.com/BrendanMartin/01e71bb9550774e2ccff3af7574c0020/raw/6fa9681c7d0232d34c9271de9be150e584e606fe/lds_default.mplstyle'])\n",
    "mpl.rcParams.update({\"figure.figsize\": (8,6), \"axes.titlepad\": 22.0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "181d0724",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target variables  :  41     0\n",
      "42     0\n",
      "0      0\n",
      "63     0\n",
      "48     0\n",
      "      ..\n",
      "80     1\n",
      "134    0\n",
      "95     0\n",
      "2      1\n",
      "3      1\n",
      "Name: HAB, Length: 118, dtype: int64\n",
      "Unique values of the target variable [0 1]\n",
      "Counts of the target variable : [93 25]\n"
     ]
    }
   ],
   "source": [
    "# print the target variable, target names, and frequency of each unique value\n",
    "\n",
    "print('Target variables  : ', train['HAB'])\n",
    "\n",
    "(unique, counts) = np.unique(train['HAB'], return_counts=True)\n",
    "\n",
    "print('Unique values of the target variable', unique)\n",
    "print('Counts of the target variable :', counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a68c5c3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a bar chart to see the target variable\n",
    "\n",
    "sns.barplot(x=unique, y=counts)\n",
    "plt.title('Target variable counts in dataset')\n",
    "plt.show()\n",
    "\n",
    "# 0 = no bloom, 1 = bloom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "28dd9bba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NDWI</th>\n",
       "      <th>PRECIP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>-0.151</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>-0.172</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.265</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0.049</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>0.166</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>-0.514</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>0.020</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0.219</td>\n",
       "      <td>1.019758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.409</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.409</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      NDWI    PRECIP\n",
       "41  -0.151  0.000000\n",
       "42  -0.172  0.000000\n",
       "0   -0.265  0.000000\n",
       "63   0.049  0.000000\n",
       "48   0.166  0.000000\n",
       "..     ...       ...\n",
       "80  -0.514  0.000000\n",
       "134  0.020  0.000000\n",
       "95   0.219  1.019758\n",
       "2   -0.409  0.000000\n",
       "3   -0.409  0.000000\n",
       "\n",
       "[118 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define explonatory variables and target variable\n",
    "\n",
    "predictors = ['NDWI', 'PRECIP']    \n",
    "predictand = ['HAB']\n",
    "\n",
    "X = train[predictors]\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "52ac4e27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HAB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     HAB\n",
       "41     0\n",
       "42     0\n",
       "0      0\n",
       "63     0\n",
       "48     0\n",
       "..   ...\n",
       "80     1\n",
       "134    0\n",
       "95     0\n",
       "2      1\n",
       "3      1\n",
       "\n",
       "[118 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = train[predictand]\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5cc31aef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply normalization operation for numerical stability\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "standardizer = StandardScaler()\n",
    "X = standardizer.fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "522ddeef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create an empty dictionary, initialize each model, then store it by name in the dictionary\n",
    "\n",
    "models = {}\n",
    "\n",
    "# Logistic Regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "models['Logistic Regression'] = LogisticRegression()\n",
    "\n",
    "# Support Vector Machines\n",
    "from sklearn.svm import LinearSVC\n",
    "models['Support Vector Machines'] = LinearSVC()\n",
    "\n",
    "# Decision Trees\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "models['Decision Trees'] = DecisionTreeClassifier()\n",
    "\n",
    "# Random Forest\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "models['Random Forest'] = RandomForestClassifier()\n",
    "\n",
    "# Naive Bayes\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "models['Naive Bayes'] = GaussianNB()\n",
    "\n",
    "# K-Nearest Neighbors\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "models['K-Nearest Neighbor'] = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ecca7143",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/geostats_env/lib/python3.8/site-packages/sklearn/utils/validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "/opt/anaconda3/envs/geostats_env/lib/python3.8/site-packages/sklearn/utils/validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "/var/folders/19/n48hkhkj75b8g1cfwx84slcc0000gn/T/ipykernel_54869/3604049717.py:10: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  models[key].fit(X, Y)\n",
      "/opt/anaconda3/envs/geostats_env/lib/python3.8/site-packages/sklearn/utils/validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "/var/folders/19/n48hkhkj75b8g1cfwx84slcc0000gn/T/ipykernel_54869/3604049717.py:10: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  models[key].fit(X, Y)\n"
     ]
    }
   ],
   "source": [
    "# loop over each one, fit it, make predictions, calculate metrics, and store each result in a dictionary\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "\n",
    "accuracy, precision, recall = {}, {}, {}\n",
    "\n",
    "for key in models.keys():\n",
    "    \n",
    "    # Fit the classifier model\n",
    "    models[key].fit(X, Y)\n",
    "    \n",
    "    # Prediction \n",
    "    predictions = models[key].predict(X)\n",
    "    \n",
    "    # Calculate Accuracy, Precision and Recall Metrics\n",
    "    accuracy[key] = accuracy_score(predictions, Y)\n",
    "    precision[key] = precision_score(predictions, Y)\n",
    "    recall[key] = recall_score(predictions, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2de0b11e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>0.771186</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Support Vector Machines</th>\n",
       "      <td>0.796610</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Decision Trees</th>\n",
       "      <td>0.974576</td>\n",
       "      <td>0.88</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>0.974576</td>\n",
       "      <td>0.88</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naive Bayes</th>\n",
       "      <td>0.389831</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.257732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>K-Nearest Neighbor</th>\n",
       "      <td>0.813559</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.560000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Accuracy  Precision    Recall\n",
       "Logistic Regression      0.771186       0.08  0.333333\n",
       "Support Vector Machines  0.796610       0.08  0.666667\n",
       "Decision Trees           0.974576       0.88  1.000000\n",
       "Random Forest            0.974576       0.88  1.000000\n",
       "Naive Bayes              0.389831       1.00  0.257732\n",
       "K-Nearest Neighbor       0.813559       0.56  0.560000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use the pandas library to view the data as a table\n",
    "\n",
    "df_model = pd.DataFrame(index=models.keys(), columns=['Accuracy', 'Precision', 'Recall'])\n",
    "df_model['Accuracy'] = accuracy.values()\n",
    "df_model['Precision'] = precision.values()\n",
    "df_model['Recall'] = recall.values()\n",
    "\n",
    "df_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "be7011d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# bar chart to compare the classifiers performance\n",
    "\n",
    "ax  = df_model.plot.bar(rot=45)\n",
    "ax.legend(ncol= len(models.keys()), bbox_to_anchor=(0, 1), loc='lower left', prop={'size': 14})\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35cf7e76",
   "metadata": {},
   "source": [
    "# Running Decision Tree Model since it was the most accurate:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8395f512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit model to the training data\n",
    "\n",
    "model = DecisionTreeClassifier()\n",
    "model.fit(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9b7779ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Positive(TP)  =  22\n",
      "False Positive(FP) =  0\n",
      "True Negative(TN)  =  93\n",
      "False Negative(FN) =  3\n",
      "Accuracy of the binary classification = 0.975\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the training data\n",
    "predictions = model.predict(X)\n",
    "\n",
    "# Calculate the accuracy score by comparing the actual values and predicted values\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "cm = confusion_matrix(Y, predictions)\n",
    "\n",
    "TN, FP, FN, TP = confusion_matrix(Y, predictions).ravel()\n",
    "\n",
    "print('True Positive(TP)  = ', TP)\n",
    "print('False Positive(FP) = ', FP)\n",
    "print('True Negative(TN)  = ', TN)\n",
    "print('False Negative(FN) = ', FN)\n",
    "\n",
    "accuracy =  (TP+TN) /(TP+FP+TN+FN)\n",
    "\n",
    "print('Accuracy of the binary classification = {:0.3f}'.format(accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9893ba1b",
   "metadata": {},
   "source": [
    "# Running model again on validation data to compare:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d0100dde",
   "metadata": {},
   "outputs": [],
   "source": [
    "# subsetting validation data into predicors and predictands\n",
    "\n",
    "X2 = test[predictors]\n",
    "Y2 = test[predictand]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "09085152",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Positive(TP)  =  7\n",
      "False Positive(FP) =  0\n",
      "True Negative(TN)  =  23\n",
      "False Negative(FN) =  0\n",
      "Accuracy of the binary classification = 1.000\n"
     ]
    }
   ],
   "source": [
    "# running decision tree model and evaluating accuracy\n",
    "\n",
    "standardizer = StandardScaler()\n",
    "X2 = standardizer.fit_transform(X2)\n",
    "\n",
    "model = DecisionTreeClassifier()\n",
    "model.fit(X2, Y2)\n",
    "\n",
    "predictions = model.predict(X2)\n",
    "\n",
    "cm = confusion_matrix(Y2, predictions)\n",
    "\n",
    "TN, FP, FN, TP = confusion_matrix(Y2, predictions).ravel()\n",
    "\n",
    "print('True Positive(TP)  = ', TP)\n",
    "print('False Positive(FP) = ', FP)\n",
    "print('True Negative(TN)  = ', TN)\n",
    "print('False Negative(FN) = ', FN)\n",
    "\n",
    "accuracy =  (TP+TN) /(TP+FP+TN+FN)\n",
    "\n",
    "print('Accuracy of the binary classification = {:0.3f}'.format(accuracy))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "geostats_env",
   "language": "python",
   "name": "geostats_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
